#!/usr/bin/env bash
# Genie app quick-fix (NO DB) â€” Amazon Linux 2023
set -euxo pipefail

# -------- Settings --------
REPO_URL="https://github.com/maze-ssa/genie-software.git"
BRANCH="main"
REPO_ROOT="/opt/genie"
APP_DIR="${REPO_ROOT}/app"
APP_USER="ec2-user"
SERVICE_NAME="genie-app"
CN_NAME="app-internal.genie-software.com"

# -------- Ensure Node & tools --------
if ! command -v node >/dev/null 2>&1; then
  dnf update -y
  dnf install -y git unzip tar gcc make openssl openssl-devel curl
  curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
  dnf install -y nodejs
else
  # still ensure git/openssl are present
  dnf install -y git openssl >/dev/null 2>&1 || true
fi

# -------- Clone or update repo (idempotent, handle /opt perms) --------
if [ -d "${REPO_ROOT}/.git" ]; then
  sudo -u "${APP_USER}" git -C "${REPO_ROOT}" fetch --all --prune
  sudo -u "${APP_USER}" git -C "${REPO_ROOT}" checkout -f "${BRANCH}"
  sudo -u "${APP_USER}" git -C "${REPO_ROOT}" reset --hard "origin/${BRANCH}"
else
  if [ -e "${REPO_ROOT}" ] && [ ! -d "${REPO_ROOT}/.git" ]; then
    mv "${REPO_ROOT}" "${REPO_ROOT}.bak.$(date +%s)"
  fi
  install -d -o "${APP_USER}" -g "${APP_USER}" "${REPO_ROOT}"
  sudo -u "${APP_USER}" git clone --branch "${BRANCH}" "${REPO_URL}" "${REPO_ROOT}"
fi

# -------- Sanity: ensure repo has app dir --------
if [ ! -f "${APP_DIR}/package.json" ]; then
  echo "ERROR: ${APP_DIR}/package.json not found. Check repo layout." >&2
  exit 1
fi

# -------- Install Node dependencies (app) --------
sudo -u "${APP_USER}" bash -lc "cd '${APP_DIR}' && (npm ci || npm install)"

# Ensure express exists (some repos may not include it yet)
if ! sudo -u "${APP_USER}" bash -lc "cd '${APP_DIR}' && npm ls express >/dev/null 2>&1"; then
  sudo -u "${APP_USER}" bash -lc "cd '${APP_DIR}' && npm install express@^4.19.2 --save"
fi

# -------- Minimal server entrypoint (no DB), match module mode --------
cd "${APP_DIR}"
MODE="cjs"
if grep -q '"type"[[:space:]]*:[[:space:]]*"module"' package.json 2>/dev/null; then
  MODE="esm"
fi

ts=$(date +%s)
[ -f server.js ] && cp -a server.js "server.js.bak.$ts" || true
[ -f server.cjs ] && cp -a server.cjs "server.cjs.bak.$ts" || true
[ -f server.mjs ] && cp -a server.mjs "server.mjs.bak.$ts" || true

if [ "$MODE" = "esm" ]; then
  cat > server.js <<'JS'
import fs from 'fs';
import https from 'https';
import express from 'express';

const PORT = parseInt(process.env.APP_PORT || '8443', 10);
const HOST = process.env.APP_HOST || '0.0.0.0';
const TLS_KEY = process.env.TLS_KEY_PATH || './tls/server.key';
const TLS_CRT = process.env.TLS_CERT_PATH || './tls/server.crt';

const app = express();
app.get('/healthz', (req, res) => res.status(200).send('ok'));

const options = {
  key: fs.readFileSync(TLS_KEY),
  cert: fs.readFileSync(TLS_CRT),
};

https.createServer(options, app).listen(PORT, HOST, () => {
  console.log(`genie-app listening https://${HOST}:${PORT}`);
});
JS
  ENTRY="server.js"
else
  cat > server.cjs <<'CJS'
const fs = require('fs');
const https = require('https');
const express = require('express');

const PORT = parseInt(process.env.APP_PORT || '8443', 10);
const HOST = process.env.APP_HOST || '0.0.0.0';
const TLS_KEY = process.env.TLS_KEY_PATH || './tls/server.key';
const TLS_CRT = process.env.TLS_CERT_PATH || './tls/server.crt';

const app = express();
app.get('/healthz', (req, res) => res.status(200).send('ok'));

const options = {
  key: fs.readFileSync(TLS_KEY),
  cert: fs.readFileSync(TLS_CRT),
};

https.createServer(options, app).listen(PORT, HOST, () => {
  console.log(`genie-app listening https://${HOST}:${PORT}`);
});
CJS
  ENTRY="server.cjs"
fi
chown "${APP_USER}:${APP_USER}" "${APP_DIR}/${ENTRY}"

# -------- TLS for bootstrap --------
install -d -m 700 -o "${APP_USER}" -g "${APP_USER}" "${APP_DIR}/tls"
if [ ! -s "${APP_DIR}/tls/server.key" ] || [ ! -s "${APP_DIR}/tls/server.crt" ]; then
  openssl req -x509 -newkey rsa:2048 \
    -keyout "${APP_DIR}/tls/server.key" \
    -out    "${APP_DIR}/tls/server.crt" -days 365 -nodes \
    -subj "/CN=${CN_NAME}"
  chown "${APP_USER}:${APP_USER}" "${APP_DIR}/tls/server.key" "${APP_DIR}/tls/server.crt"
  chmod 600 "${APP_DIR}/tls/server.key"
fi

# -------- Systemd unit (inline env; no external file) --------
cat >/etc/systemd/system/${SERVICE_NAME}.service <<UNIT
[Unit]
Description=Genie Intranet App (HTTPS on 8443)
After=network-online.target
Wants=network-online.target

[Service]
User=${APP_USER}
Group=${APP_USER}
WorkingDirectory=${APP_DIR}
Environment=APP_PORT=8443
Environment=APP_HOST=0.0.0.0
Environment=TLS_CERT_PATH=${APP_DIR}/tls/server.crt
Environment=TLS_KEY_PATH=${APP_DIR}/tls/server.key
ExecStart=/usr/bin/env node ${ENTRY}
Restart=always
RestartSec=3
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=full
ProtectHome=true
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
UNIT

# -------- Start & verify --------
systemctl daemon-reload
systemctl enable --now "${SERVICE_NAME}"

# show status briefly
sleep 1
systemctl --no-pager -l status "${SERVICE_NAME}" || true

# local health
curl -sk -o /dev/null -w "%{http_code}\n" https://127.0.0.1:8443/healthz || true
